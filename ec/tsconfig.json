{
	"compilerOptions": {
		"target": "es5",
		//lib는 현재 프로젝트에서 사용할 수 있는 특정 기능에 대한 문법(타입)을 추가해준다.
		//lib를 ["DOM"]과 같이 지정하면 DOM관련 API의 타입을 사용
		"lib": ["dom", "dom.iterable", "esnext"],
		"allowJs": true,
		"skipLibCheck": true,
		//strict를 true로 지정하면 typescript의 type 검사 옵션 중 strict* 관련된 모든 것을 true
		"strict": true,
		"forceConsistentCasingInFileNames": true,
		//noEmit을 true로 설정하면 최종결과물이 나오지 않게 된다
		"noEmit": true,
		"noUncheckedIndexedAccess": true,
		//ES6가 아닌 CommonJS 두 방식의 차이를 자동으로 해소
		"esModuleInterop": true,
		//컴파일된 결과물이 사용하게 될 module 방식
		"module": "esnext",
		//모듈 해결 전략을 설정하는 것인데 여기서 "node"로 설정하는 것이 node.js의 node_modules에서 모듈을 가지고 오는 것이라고 오해하지 않았으면 좋겠다. node.js가 사용하는 방식으로 모듈
		"moduleResolution": "node",
		"resolveJsonModule": true,
		//isolatedModules을 true로 설정하면 프로젝트 내에 모든 각각의 소스코드 파일을 모듈로 만들기를 강제
		"isolatedModules": true,
		"jsx": "preserve",
		"incremental": true, // 消した理由を確認 noEmit と一緒に指定できない？
		//외부 모듈이 아닌 이상 상대 경로로 모듈을 참조해야 한다. baseUrl은 외부 모듈이 아닌 모듈들을 절대 경로 참조
		"baseUrl": ".",
		//모듈 참조를 baseUrl를 기준으로 다시 매핑
		"paths": {
			"@/*": ["src/*"]
		}
	},
	//include를 통해서 pattern 형태로 원하는 파일 목록을 지정
	"include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
	//exclude로 include에 지정한 파일이나 패턴을 제외
	"exclude": ["node_modules", "tools"]
}
/*https://velog.io/@sooran/tsconfig.json-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%95%8C%EA%B3%A0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0*/
